# calculate individual's fitness
def gene_fitness(individual):
    fitness = 0
    for i in range(0, N):
        if individual.gene[i] == 1:  # if gene at index i equals to 1
            fitness = fitness + individual.gene[i]
    return fitness


# calculate population's fitness
def total_fitness(population):
    total_fitness = 0
    for individual in population:
        total_fitness += individual.fitness
    return total_fitness


#initialise population
def init_population():
    population = []
    for i in range(0, P):
        temp_gene = []
        for i in range(0, N):
            temp_gene.append(random.randint(0, 1))  # a random gene between 0 and 1

        new_ind = Individual()  # initialise new instance
        new_ind.gene = temp_gene.copy()  # copy the gene from temp_gene and assign to gene of individual
        new_ind.fitness = gene_fitness(new_ind)  # initialise instance's fitness

        print(temp_gene, " -> ", new_ind.fitness)
        population.append(new_ind)

    return population


# tournament selection
def TNS(population):
    offsprings = []
    for i in range(0, P):
        parent1 = random.randint(0, P - 1)
        off1 = population[parent1]
        parent2 = random.randint(0, P - 1)
        off2 = population[parent2]
        if off1.fitness > off2.fitness:  # if one's fitness higher then add to temp offsprings
            offsprings.append(off1)
        else:
            offsprings.append(off2)
    return offsprings


# roulette wheel selection
def RWS(population):
    # total fitness of initial pop
    initial_fits = total_fitness(population)

    offspring = copy.deepcopy(population)
    # Roulette Wheel Selection Process
    # Select two parents and recombine pairs of parents
    for i in range(0, P):
        selection_point = random.uniform(0.0, initial_fits)
        running_total = 0
        j = 0
        while running_total <= selection_point:
            running_total += population[j].fitness
            j += 1
            if(j == P):
                break
        offspring[i] = population[j-1]

    return offspring